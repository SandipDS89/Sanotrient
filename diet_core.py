# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lNXEtleGXeaWGvM2eWncgv_Z4RzqaIUV
"""

# diet_core.py
import pandas as pd
import numpy as np

# ---------------------------------------------------------
# Load data helper
# ---------------------------------------------------------
def load_dataset(path="meal_dataset.csv"):
    """
    Load and preprocess the meal dataset.
    """
    df = pd.read_csv(path, encoding="latin1")
    df["Allergens"] = df["Allergens"].fillna("None")
    return df


# ---------------------------------------------------------
# Core functions
# ---------------------------------------------------------
def calculate_targets(user):
    """Calculate calories and macronutrient targets."""
    if user["gender"] == "male":
        bmr = 10 * user["weight"] + 6.25 * user["height"] - 5 * user["age"] + 5
    else:
        bmr = 10 * user["weight"] + 6.25 * user["height"] - 5 * user["age"] - 161

    activity_factor = {"sedentary": 1.2, "moderate": 1.55, "active": 1.725}
    tdee = bmr * activity_factor.get(user["activity"], 1.2)

    if user["goal"] == "weight_loss":
        target_cal = max(1200, tdee - 400)
        if user["gender"] == "female" and user["age"] < 25:
            target_cal = max(1300, target_cal)
    else:
        target_cal = tdee + 400

    protein_g = (0.25 * target_cal) / 4
    fat_g = (0.25 * target_cal) / 9
    carb_g = (0.50 * target_cal) / 4

    return {
        "target_cal": round(target_cal, 1),
        "protein_g": round(protein_g, 1),
        "fat_g": round(fat_g, 1),
        "carb_g": round(carb_g, 1),
    }


def filter_foods(df, user):
    """Filter foods by veg preference and allergens."""
    foods = df.copy()

    if user.get("preference") == "veg":
        foods = foods[foods["Category"] == "Veg"]

    if user.get("allergen") and user["allergen"] != "none":
        allergen_cap = user["allergen"].title()
        foods = foods[
            (foods["Allergens"] != allergen_cap) | (foods["Allergens"] == "None")
        ]

    return foods.reset_index(drop=True)


def calculate_nutrition(food_row, portion_multiplier):
    return {
        "calories": food_row["Energy (kcal)"] * portion_multiplier,
        "protein": food_row["Protein (g)"] * portion_multiplier,
        "fat": food_row["Fat (g)"] * portion_multiplier,
        "carbs": food_row["Carbohydrates (g)"] * portion_multiplier,
    }


def select_foods_for_meal(foods, meal_type, target_calories, user):
    """Select foods for a given meal."""
    # (kept your original selection logic but removed print statements)
    selected_items = []
    current_calories = 0

    if len(foods) == 0:
        return selected_items

    if meal_type == "Breakfast":
        meal_foods = foods[foods["Meal Type"] == "Breakfast"].copy()
        priorities = [
            ("Dairy & Alternatives", 0.25),
            ("Cereals & Grains", 0.45),
            ("Poultry/Meat", 0.25),
            ("Fruits", 0.05),
        ]
    elif meal_type == "Snacks":
        meal_foods = foods[foods["Meal Type"] == "Snacks"].copy()
        priorities = [("Fruits", 0.75), ("Nuts & Seeds", 0.25)]
    else:
        meal_foods = foods[foods["Meal Type"] == "Lunch & Dinner"].copy()
        priorities = [
            ("Poultry/Meat", 0.30),
            ("Cereals & Grains", 0.35),
            ("Legumes & Pulses", 0.25),
            ("Vegetables", 0.10),
        ]

    used_proteins = []

    for subcategory, cal_ratio in priorities:
        target_cal_for_category = target_calories * cal_ratio
        category_foods = meal_foods[meal_foods["Subcategory"] == subcategory]

        if len(category_foods) > 0:
            selected_food = category_foods.sample(1).iloc[0]
            base_calories = selected_food["Energy (kcal)"]
            ideal_multiplier = (
                target_cal_for_category / base_calories if base_calories > 0 else 1.0
            )

            # set max multiplier
            if subcategory == "Nuts & Seeds":
                max_mult = 0.5 if base_calories <= 400 else 0.2
            elif subcategory == "Dairy & Alternatives":
                max_mult = 2.0
            elif subcategory == "Vegetables":
                max_mult = 2.5
            elif subcategory in ["Cereals & Grains", "Legumes & Pulses"]:
                max_mult = 2.0
            else:
                max_mult = 1.8

            multiplier = min(max(0.5, ideal_multiplier), max_mult)
            actual_calories = base_calories * multiplier

            selected_items.append(
                {
                    "food_name": selected_food["Food Item"],
                    "portion": selected_food["Portion"],
                    "food_data": selected_food,
                    "multiplier": multiplier,
                    "calories": actual_calories,
                    "subcategory": subcategory,
                }
            )

            current_calories += actual_calories
            if subcategory in ["Poultry/Meat", "Seafood"]:
                used_proteins.append(subcategory)

    return selected_items


def generate_complete_meal_plan(filtered_foods, targets, user):
    """Generate meal plan with macros."""
    if len(filtered_foods) == 0:
        return {}, {"calories": 0, "protein": 0, "fat": 0, "carbs": 0}

    if user["goal"] == "weight_loss":
        meal_calories = {
            "Breakfast": targets["target_cal"] * 0.30,
            "Lunch": targets["target_cal"] * 0.40,
            "Snacks": targets["target_cal"] * 0.10,
            "Dinner": targets["target_cal"] * 0.20,
        }
    else:
        meal_calories = {
            "Breakfast": targets["target_cal"] * 0.25,
            "Lunch": targets["target_cal"] * 0.35,
            "Snacks": targets["target_cal"] * 0.15,
            "Dinner": targets["target_cal"] * 0.25,
        }

    meal_plan = {}
    total_nutrition = {"calories": 0, "protein": 0, "fat": 0, "carbs": 0}

    for meal_type, target_cal in meal_calories.items():
        items = select_foods_for_meal(filtered_foods, meal_type, target_cal, user)
        meal_plan[meal_type] = []

        for item in items:
            display_portion = item["portion"]
            meal_plan[meal_type].append(
                {
                    "display": f"{item['food_name']} - {display_portion}",
                    "calories": item["calories"],
                }
            )

            nutrition = calculate_nutrition(item["food_data"], item["multiplier"])
            for key in total_nutrition:
                total_nutrition[key] += nutrition[key]

    return meal_plan, total_nutrition

def get_diet_recommendation(user):
    """
    Main wrapper to generate diet recommendation from user input.
    Returns a readable string with the meal plan and totals.
    """
    # Load the dataset
    df = load_dataset("meal_dataset.csv")

    # Calculate targets
    targets = calculate_targets(user)

    # Filter foods
    filtered_foods = filter_foods(df, user)

    # Generate meal plan
    meal_plan, total_nutrition = generate_complete_meal_plan(filtered_foods, targets, user)

    # Build a readable string
    # Build an HTML string instead of plain text
    result = f'<div class="recommendation-content">'
    result += f"""
        <h4>Daily Targets</h4>
        <p>
            <strong>{round(total_nutrition['calories'], 1)} kcal</strong> |
            Protein: {round(total_nutrition['protein'], 1)} g |
            Fat: {round(total_nutrition['fat'], 1)} g |
            Carbs: {round(total_nutrition['carbs'], 1)} g
        </p>
    """    
    for meal, items in meal_plan.items():
        result += f"<h4>{meal}</h4>"
        if items:
            result += "<ul>"
            for i in items:
                kcal = round(i["calories"], 1)
                result += f"<li>{i['display']} <strong>({kcal} kcal)</strong></li>"
            result += "</ul>"
        else:
            result += "<p>No suitable items found.</p>"

    result += "</div>"
    return result


